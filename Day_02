ðŸ“š Day 2: Python Fundamentals - Theoretical Deep Dive
1. Functions: The Building Blocks of Modular Code
1.1 Theoretical Foundations

    Definition: A function is a named, reusable block of code that performs a specific task (subroutine).

    Mathematical Basis: Inspired by mathematical functions f(x) where:

        Input â†’ Parameters (x)

        Output â†’ Return value (f(x))

    Memory Management: Functions create a new stack frame during execution (isolated namespace).

1.2 Key Components
Component	Purpose	Example
Parameters	Input variables (placeholders)	def greet(name):
Arguments	Actual values passed	greet("Alice")
Return	Output value (None if omitted)	return x + y
Scope	Variable visibility (LEGB rule)	Local vs global variables
1.3 Why Functions Matter

    Abstraction: Hide implementation details
    python
    Copy

    # User doesn't need to know how sqrt is implemented
    result = math.sqrt(25)

    Recursion: Functions calling themselves (theoretical basis for algorithms)
    python
    Copy

    def factorial(n):
        return 1 if n == 0 else n * factorial(n-1)

2. Data Structures: Organizing Information
2.1 Lists vs. Tuples (Theory)
Property	Lists ([])	Tuples (())
Mutability	Mutable (can modify after creation)	Immutable (fixed after creation)
Memory	Higher overhead (dynamic sizing)	Lower memory usage
Use Case	Data that changes frequently	Fixed data (e.g., RGB colors)

Under the Hood:

    Both are sequence types implementing common protocols:
    python
    Copy

    # Supports iteration, indexing, slicing
    for item in my_list: ...

2.2 Dictionaries: Hash Tables in Action

    Core Theory: Implements hash table (key-value pairs)

        Average O(1) time complexity for lookups

        Collision resolution via open addressing/chaining

    Immutability Rule: Keys must be hashable (immutable types only)
    python
    Copy

    valid = {int: 1, str: "hello", tuple: (1,2)}  # Works
    invalid = {[1,2]: "list"}  # TypeError: unhashable type

2.3 Sets: Mathematical Sets Implementation

    Theoretical Basis: Unordered collection of unique elements

        Implements set operations (union, intersection)

        Backed by hash table (like dictionaries but without values)

    Frozen Sets: Immutable variant (frozenset)

3. Memory & Performance Implications
3.1 Memory Allocation
Structure	Memory Behavior
List	Over-allocates memory for growth
Tuple	Fixed allocation at creation
Dictionary	Resizes when ~2/3 full
3.2 Time Complexity (Big-O)
Operation	List	Dictionary	Set
Access	O(1)	O(1)	N/A
Search	O(n)	O(1)	O(1)
Insert	O(1)*	O(1)	O(1)

*O(1) for appending, O(n) for middle insertions
4. Advanced Theoretical Concepts
4.1 Python's Data Model

    All data structures are objects inheriting from base classes:
    python
    Copy

    isinstance([], (list, object))  # True

    Protocols: Implement methods like __iter__(), __getitem__() for behavior

4.2 Function Internals

    First-Class Objects: Can be assigned to variables, passed as arguments
    python
    Copy

    def square(x): return x*x
    func = square  # Assign function to variable

    Closures: Functions remembering their enclosing scope
    python
    Copy

    def outer():
        x = 10
        def inner():  # Remembers 'x'
            return x
        return inner

5. Academic References

    Functions: Python Language Reference Â§4.7

    Data Structures: Python Docs - Data Structures

    Algorithm Analysis: "Introduction to Algorithms" (Cormen) - Big-O notation
